// Prisma Schema for Alumni QR Code Tracking App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model: Handles both alumni and admin/super admin login.
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     Role
  alumni   Alumni?
  avatar   String?

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ALUMNI
  ADMIN
  SUPER_ADMIN
}

// Alumni model: Stores the alumni's personal information and their QR code.
model Alumni {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  graduationYear Int
  major          String
  email          String         @unique
  qrCode         String         @unique // Unique QR code for alumni
  user           User           @relation(fields: [userId], references: [id])
  userId         Int            @unique

  interested     Event[]        @relation("InterestEvent") // Many-to-many relationship with events
  events         Event[]        @relation("EventAttendees") // Many-to-many relationship with events
  notifications  Notification[] // Alumni can have multiple notifications
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// Event model: Represents the alumni events (like homecoming).
model Event {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  content   String
  coverImg  String?
  startDate DateTime
  endDate   DateTime

  startTime     DateTime        // Time when the alumni checked in
  endTime       DateTime      // Time when the alumni checked out

  location String

  interested Alumni[] @relation("InterestEvent") // Many-to-many with alumni
  alumni     Alumni[] @relation("EventAttendees") // Many-to-many with alumni

  // Notifications related to the event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notification model: Stores notifications for alumni.
model Notification {
  id         Int      @id @default(autoincrement())
  message    String
  readStatus Boolean  @default(false) // Whether the notification has been read
  alumniId   Int
  alumni     Alumni   @relation(fields: [alumniId], references: [id])
  createdAt  DateTime @default(now())
}

model Session {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("sessions")
}
