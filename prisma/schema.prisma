// Prisma Schema for Alumni QR Code Tracking App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Alumni {
  id             Int      @id @default(autoincrement())
  studentId      String   @unique
  lrn            String   @unique
  firstName      String
  middleName     String
  lastName       String
  graduationYear Int
  birthDate      DateTime
  strand  String?
  educationLevel String?

  // POST GRADUATION INFORMATION
  furtherEducation String?
  course String?
  schoolName String?
  // JOB INFORMATION
  status String?
  companyName String?
  jobTitle String?
  
  alumniAccount  AlumniAccount?  

  @@map("alumni")
}

// Alumni model: Stores the alumni's personal information and their QR code.
model AlumniAccount {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  middleName String?

  graduationYear Int 

  major String?
  email  String @unique
  qrCode String  // Unique QR code for alumni
 
  alumniId      Int? @unique
  alumni Alumni? @relation(   fields: [alumniId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  

  lrn String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  interested    Event[]        @relation("InterestEvent") // Many-to-many relationship with events
  events        Event[]        @relation("EventAttendees") // Many-to-many relationship with events

  eventComments EventComment[]
  // announcementComments AnnouncementComment[] // Alumni can have multiple announcements

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("alumni_accounts")
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

// User model: Handles both alumni and admin/super admin login.
model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  firstName String  @default("")
  lastName  String  @default("")
  middleName String? @default("")
  role      Role
  avatar    String?

  nationality String? @default("")
  religion String? @default("")
  gender Gender @default(PREFER_NOT_TO_SAY)
  address String? @default("")
  contactNumber String? @default("")
  birthDate DateTime? 


  alumni    AlumniAccount?
  sessions Session[]

  verifiedAt DateTime?
  status     UserStatus @default(PENDING)

  notifications Notification[] // Alumni can have multiple notifications

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
  DELETED
}

enum Role {
  ALUMNI
  ADMIN
  SUPER_ADMIN
}

// Event model: Represents the alumni events (like homecoming).
model Event {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  content   String
  coverImg  String
  startDate DateTime
  endDate   DateTime

  startTime DateTime // Time when the alumni checked in
  endTime   DateTime // Time when the alumni checked out

  location String

  interested AlumniAccount[] @relation("InterestEvent") // Many-to-many with alumni
  alumni     AlumniAccount[] @relation("EventAttendees") // Many-to-many with alumni

  comments EventComment[]

  // Notifications related to the event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

// Notification model: Stores notifications for alumni.
model Notification {
  id         Int      @id @default(autoincrement())
  message    String
  readStatus Boolean  @default(false) // Whether the notification has been read
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@map("notifications")
}

model Session {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Token {
 
  email String @unique @id
  token String 
  validUntil DateTime

  @@map("tokens")
}

model EventComment {
  id Int @id @default(autoincrement())
  comment String

  eventId Int
  event Event @relation(fields: [eventId], references: [id])
  commentBy AlumniAccount @relation(fields: [commentById],references: [id])
  commentById Int   

  createdAt DateTime @default(now())

  @@map("event_comments")
}


// model AnnouncementComment { 
//   id Int @id @default(autoincrement())

//   comment String
//   announcementId Int
//   announcement Announcement @relation(fields: [announcementId], references: [id])
//   commentBy AlumniAccount @relation(fields: [commentById], references: [id])
//   commentById Int

//   createdAt DateTime @default(now())

//   @@map("announcement_comments")
// }

// model Announcement {

//   id        Int      @id @default(autoincrement())
//   slug      String   @unique
//   name      String
//   content   String
//   coverImg  String

//   comments AnnouncementComment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }